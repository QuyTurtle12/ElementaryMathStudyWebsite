// <auto-generated />
using System;
using ElementaryMathStudyWebsite.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ElementaryMathStudyWebsite.Repositories.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240919010421_AddedVerificationTokenInUser")]
    partial class AddedVerificationTokenInUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Entity.Payment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("PaymentDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Entity.Result", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QuizId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AttemptNumber")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DateTaken")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.HasKey("StudentId", "QuizId", "AttemptNumber");

                    b.HasIndex("QuizId");

                    b.ToTable("Result");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Repositories.Entity.Chapter", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChapterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.Property<string>("QuizId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("QuizId")
                        .IsUnique()
                        .HasFilter("[QuizId] IS NOT NULL");

                    b.HasIndex("SubjectId");

                    b.ToTable("Chapter");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Repositories.Entity.Option", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("QuestionId");

                    b.ToTable("Option");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Repositories.Entity.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Repositories.Entity.OrderDetail", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId", "SubjectId", "StudentId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Repositories.Entity.Progress", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QuizId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentId", "QuizId");

                    b.HasIndex("QuizId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Progress");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Repositories.Entity.Question", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("QuestionContext")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuizId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("QuizId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Repositories.Entity.Quiz", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<double?>("Criteria")
                        .HasColumnType("float");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("QuizName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("Quiz");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Repositories.Entity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Repositories.Entity.Subject", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Repositories.Entity.Topic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChapterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.Property<string>("QuizId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TopicContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("QuizId")
                        .IsUnique()
                        .HasFilter("[QuizId] IS NOT NULL");

                    b.ToTable("Topic");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LastUpdatedBy");

                    b.HasIndex("RoleId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Repositories.Entity.UserAnswer", b =>
                {
                    b.Property<string>("QuestionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AttemptNumber")
                        .HasColumnType("int");

                    b.Property<string>("OptionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("QuestionId", "UserId", "AttemptNumber");

                    b.HasIndex("OptionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAnswer");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Entity.Payment", b =>
                {
                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("ElementaryMathStudyWebsite.Core.Entity.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Entity.Result", b =>
                {
                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.Quiz", "Quiz")
                        .WithMany("Results")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", "Student")
                        .WithMany("Results")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Repositories.Entity.Chapter", b =>
                {
                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.Quiz", "Quiz")
                        .WithOne("Chapter")
                        .HasForeignKey("ElementaryMathStudyWebsite.Core.Repositories.Entity.Chapter", "QuizId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.Subject", "Subject")
                        .WithMany("Chapters")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("LastUpdatedByUser");

                    b.Navigation("Quiz");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Repositories.Entity.Option", b =>
                {
                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("LastUpdatedByUser");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Repositories.Entity.Order", b =>
                {
                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("LastUpdatedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Repositories.Entity.OrderDetail", b =>
                {
                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", "User")
                        .WithMany("OrderDetails")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.Subject", "Subject")
                        .WithMany("Detail")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Repositories.Entity.Progress", b =>
                {
                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.Quiz", "Quiz")
                        .WithMany("Progresses")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.Subject", "Subject")
                        .WithMany("Progresses")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", "User")
                        .WithMany("Progresses")
                        .HasForeignKey("UserId");

                    b.Navigation("Quiz");

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Repositories.Entity.Question", b =>
                {
                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("LastUpdatedByUser");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Repositories.Entity.Quiz", b =>
                {
                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("LastUpdatedByUser");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Repositories.Entity.Role", b =>
                {
                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("LastUpdatedByUser");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Repositories.Entity.Subject", b =>
                {
                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("LastUpdatedByUser");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Repositories.Entity.Topic", b =>
                {
                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.Chapter", "Chapter")
                        .WithMany("Topics")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.Quiz", "Quiz")
                        .WithOne("Topic")
                        .HasForeignKey("ElementaryMathStudyWebsite.Core.Repositories.Entity.Topic", "QuizId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Chapter");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("LastUpdatedByUser");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", b =>
                {
                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("LastUpdatedByUser");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Repositories.Entity.UserAnswer", b =>
                {
                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.Option", "Option")
                        .WithMany("Answers")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", "User")
                        .WithMany("Answers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Repositories.Entity.Chapter", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Repositories.Entity.Option", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Repositories.Entity.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Repositories.Entity.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Repositories.Entity.Quiz", b =>
                {
                    b.Navigation("Chapter");

                    b.Navigation("Progresses");

                    b.Navigation("Questions");

                    b.Navigation("Results");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Repositories.Entity.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Repositories.Entity.Subject", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Detail");

                    b.Navigation("Progresses");
                });

            modelBuilder.Entity("ElementaryMathStudyWebsite.Core.Repositories.Entity.User", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("OrderDetails");

                    b.Navigation("Orders");

                    b.Navigation("Payments");

                    b.Navigation("Progresses");

                    b.Navigation("Results");
                });
#pragma warning restore 612, 618
        }
    }
}
